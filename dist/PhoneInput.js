"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const country_1 = __importDefault(require("./country"));
const flags_1 = __importDefault(require("./resources/flags"));
const phoneNumber_1 = __importDefault(require("./phoneNumber"));
const styles_1 = __importDefault(require("./styles"));
const CountryPicker_1 = __importDefault(require("./CountryPicker"));
class PhoneInput extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.onChangePhoneNumber = (number) => {
            const actionAfterSetState = this.props.onChangePhoneNumber
                ? (displayValue, iso2) => {
                    var _a, _b;
                    (_b = (_a = this.props).onChangePhoneNumber) === null || _b === void 0 ? void 0 : _b.call(_a, displayValue, iso2);
                }
                : null;
            this.updateValue(number, actionAfterSetState);
        };
        this.onPressFlag = () => {
            if (this.props.onPressFlag) {
                this.props.onPressFlag();
            }
            else {
                if (this.state.iso2)
                    this.picker.selectCountry(this.state.iso2);
                this.picker.show();
            }
        };
        // eslint-disable-next-line class-methods-use-this
        this.getFlag = (iso2) => flags_1.default.get(iso2);
        this.getISOCode = () => this.state.iso2;
        this.selectCountry = (iso2) => {
            if (this.state.iso2 !== iso2) {
                const countryData = phoneNumber_1.default.getCountryDataByCode(iso2);
                if (countryData) {
                    this.setState({
                        iso2,
                        displayValue: this.format(`+${countryData.dialCode}`),
                        value: `+${countryData.dialCode}`
                    }, () => {
                        if (this.props.onSelectCountry)
                            this.props.onSelectCountry(iso2);
                    });
                }
            }
        };
        this.setValue = (number) => {
            if (this.state.value !== number) {
                this.updateValue(number);
            }
        };
        let { initialCountry, initialValue } = this.props;
        const { countriesList, disabled, } = this.props;
        if (countriesList) {
            country_1.default.setCustomCountriesData(countriesList);
        }
        let displayValue = '';
        if (initialValue) {
            if (initialValue[0] !== '+') {
                initialValue = `+${initialValue}`;
            }
            initialCountry = phoneNumber_1.default.getCountryCodeOfNumber(initialValue);
            displayValue = this.format(initialValue, initialCountry);
        }
        else {
            const countryData = phoneNumber_1.default.getCountryDataByCode(initialCountry);
            initialValue = countryData ? `+${countryData.dialCode}` : '';
            displayValue = initialValue;
        }
        this.state = {
            disabled,
            iso2: initialCountry,
            displayValue,
            value: initialValue,
        };
    }
    static setCustomCountriesData(json) {
        country_1.default.setCustomCountriesData(json);
    }
    componentDidUpdate() {
        const { disabled } = this.props;
        if (disabled !== this.state.disabled) {
            this.setState({ disabled }); // eslint-disable-line react/no-did-update-set-state
        }
    }
    // eslint-disable-next-line class-methods-use-this
    getPickerData() {
        return phoneNumber_1.default.getAllCountries().map((country, index) => ({
            key: index,
            image: flags_1.default.get(country.iso2),
            label: country.name,
            dialCode: `+${country.dialCode}`,
            iso2: country.iso2
        }));
    }
    getCountryCode() {
        const countryData = phoneNumber_1.default.getCountryDataByCode(this.state.iso2);
        return countryData ? countryData.dialCode : null;
    }
    // eslint-disable-next-line class-methods-use-this
    getAllCountries() {
        return phoneNumber_1.default.getAllCountries();
    }
    getDialCode() {
        return phoneNumber_1.default.getDialCode(this.state.value);
    }
    getValue(text) {
        return text ? text.replace(/[^0-9]/g, '') : this.state.value;
    }
    getNumberType() {
        return phoneNumber_1.default.getNumberType(this.state.value, this.state.iso2);
    }
    isValidNumber() {
        if (this.state.value.length < 4)
            return false;
        return phoneNumber_1.default.isValidNumber(this.state.value, this.state.iso2);
    }
    format(text, iso2) {
        return this.props.autoFormat
            ? phoneNumber_1.default.format(text, iso2 || this.state.iso2)
            : text;
    }
    updateValue(number, actionAfterSetState = null) {
        let modifiedNumber = this.getValue(number);
        const { allowZeroAfterCountryCode } = this.props;
        if (modifiedNumber[0] !== '+' && number.length) {
            modifiedNumber = `+${modifiedNumber}`;
        }
        modifiedNumber = allowZeroAfterCountryCode
            ? modifiedNumber
            : this.possiblyEliminateZeroAfterCountryCode(modifiedNumber);
        const iso2 = phoneNumber_1.default.getCountryCodeOfNumber(modifiedNumber);
        let countryDialCode;
        if (iso2) {
            const countryData = phoneNumber_1.default.getCountryDataByCode(iso2);
            countryDialCode = countryData.dialCode;
        }
        let displayValue;
        if (modifiedNumber === `+${countryDialCode}`) {
            displayValue = modifiedNumber;
        }
        else {
            displayValue = this.format(modifiedNumber);
        }
        this.setState({
            iso2,
            displayValue,
            value: modifiedNumber,
        }, () => {
            if (actionAfterSetState) {
                actionAfterSetState(displayValue, iso2);
            }
        });
    }
    // eslint-disable-next-line class-methods-use-this
    possiblyEliminateZeroAfterCountryCode(number) {
        const dialCode = phoneNumber_1.default.getDialCode(number);
        return number.startsWith(`${dialCode}0`)
            ? dialCode + number.substr(dialCode.length + 1)
            : number;
    }
    focus() {
        this.inputPhone.focus();
    }
    blur() {
        this.inputPhone.blur();
    }
    render() {
        const { iso2, displayValue, disabled } = this.state;
        const TextComponent = this.props.textComponent || react_native_1.TextInput;
        return (react_1.default.createElement(react_native_1.View, { style: [styles_1.default.container, this.props.style] },
            react_1.default.createElement(react_native_1.TouchableWithoutFeedback, { onPress: this.onPressFlag, disabled: disabled },
                react_1.default.createElement(react_native_1.Image, { source: flags_1.default.get(iso2), style: [styles_1.default.flag, this.props.flagStyle] })),
            react_1.default.createElement(react_native_1.View, { style: { flex: 1, marginLeft: this.props.offset || 10 } },
                react_1.default.createElement(TextComponent, Object.assign({ ref: (ref) => {
                        this.inputPhone = ref;
                    }, editable: !disabled, autoCorrect: false, style: [styles_1.default.text, this.props.textStyle], onChangeText: (text) => {
                        this.onChangePhoneNumber(text);
                    }, keyboardType: "phone-pad", underlineColorAndroid: "rgba(0,0,0,0)", value: displayValue }, this.props.textProps))),
            react_1.default.createElement(CountryPicker_1.default, { ref: (ref) => {
                    this.picker = ref;
                }, selectedCountry: iso2, onSubmit: this.selectCountry, buttonColor: this.props.pickerButtonColor, cancelText: this.props.cancelText, cancelTextStyle: this.props.cancelTextStyle, confirmText: this.props.confirmText, confirmTextStyle: this.props.confirmTextStyle, pickerBackgroundColor: this.props.pickerBackgroundColor, itemStyle: this.props.pickerItemStyle, onPressCancel: this.props.onPressCancel, onPressConfirm: this.props.onPressConfirm })));
    }
}
exports.default = PhoneInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGhvbmVJbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9QaG9uZUlucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUEwQjtBQUMxQiwrQ0FFc0I7QUFDdEIsd0RBQWdDO0FBQ2hDLDhEQUFzQztBQUN0QyxnRUFBd0M7QUFDeEMsc0RBQThCO0FBQzlCLG9FQUE0QztBQUc1QyxNQUFxQixVQUNqQixTQUFRLGVBQUssQ0FBQyxTQUE2RDtJQVMzRSxZQUFZLEtBQUs7UUFDYixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUE0Q2pCLHdCQUFtQixHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDN0IsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQjtnQkFDdEQsQ0FBQyxDQUFDLENBQUMsWUFBb0IsRUFBRSxJQUFZLEVBQUUsRUFBRTs7b0JBQ2pDLE1BQUEsTUFBQSxJQUFJLENBQUMsS0FBSyxFQUFDLG1CQUFtQixtREFBRyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzdELENBQUM7Z0JBQ0QsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNYLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFBO1FBRUQsZ0JBQVcsR0FBRyxHQUFHLEVBQUU7WUFDZixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO2dCQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNILElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO29CQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDdEI7UUFDTCxDQUFDLENBQUE7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VCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztnQkFDdEIsQ0FBQyxFQUNELGVBQWUsRUFBRSxJQUFJLEVBQ3JCLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFDekMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUNqQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQzNDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFDbkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFDN0MscUJBQXFCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFDdkQsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUNyQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQ3ZDLGNBQWMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FDM0MsQ0FDQyxDQUNWLENBQUM7SUFDTixDQUFDO0NBQ0o7QUEvUEQsNkJBK1BDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gICAgSW1hZ2UsIFRleHRJbnB1dCwgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLCBWaWV3XG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ291bnRyeSBmcm9tICcuL2NvdW50cnknO1xuaW1wb3J0IEZsYWdzIGZyb20gJy4vcmVzb3VyY2VzL2ZsYWdzJztcbmltcG9ydCBQaG9uZU51bWJlciBmcm9tICcuL3Bob25lTnVtYmVyJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0IENvdW50cnlQaWNrZXIgZnJvbSAnLi9Db3VudHJ5UGlja2VyJztcbmltcG9ydCB7IFJlYWN0TmF0aXZlUGhvbmVJbnB1dFByb3BzIH0gZnJvbSAnLi90eXBpbmdzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGhvbmVJbnB1dDxUZXh0Q29tcG9uZW50VHlwZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudFR5cGUgPSB0eXBlb2YgVGV4dElucHV0PlxuICAgIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFJlYWN0TmF0aXZlUGhvbmVJbnB1dFByb3BzPFRleHRDb21wb25lbnRUeXBlPiwgYW55PiB7XG4gICAgc3RhdGljIHNldEN1c3RvbUNvdW50cmllc0RhdGEoanNvbikge1xuICAgICAgICBDb3VudHJ5LnNldEN1c3RvbUNvdW50cmllc0RhdGEoanNvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwaWNrZXI6IGFueTtcblxuICAgIHByaXZhdGUgaW5wdXRQaG9uZTogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBpbml0aWFsQ291bnRyeSwgaW5pdGlhbFZhbHVlXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNvdW50cmllc0xpc3QsIGRpc2FibGVkLFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBpZiAoY291bnRyaWVzTGlzdCkge1xuICAgICAgICAgICAgQ291bnRyeS5zZXRDdXN0b21Db3VudHJpZXNEYXRhKGNvdW50cmllc0xpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRpc3BsYXlWYWx1ZSA9ICcnO1xuXG4gICAgICAgIGlmIChpbml0aWFsVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpbml0aWFsVmFsdWVbMF0gIT09ICcrJykge1xuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGArJHtpbml0aWFsVmFsdWV9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5pdGlhbENvdW50cnkgPSBQaG9uZU51bWJlci5nZXRDb3VudHJ5Q29kZU9mTnVtYmVyKGluaXRpYWxWYWx1ZSk7XG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSB0aGlzLmZvcm1hdChpbml0aWFsVmFsdWUsIGluaXRpYWxDb3VudHJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50cnlEYXRhID0gUGhvbmVOdW1iZXIuZ2V0Q291bnRyeURhdGFCeUNvZGUoaW5pdGlhbENvdW50cnkpO1xuICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gY291bnRyeURhdGEgPyBgKyR7Y291bnRyeURhdGEuZGlhbENvZGV9YCA6ICcnO1xuICAgICAgICAgICAgZGlzcGxheVZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgICAgaXNvMjogaW5pdGlhbENvdW50cnksXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUsXG4gICAgICAgICAgICB2YWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgeyBkaXNhYmxlZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKGRpc2FibGVkICE9PSB0aGlzLnN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGlzYWJsZWQgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tZGlkLXVwZGF0ZS1zZXQtc3RhdGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2hhbmdlUGhvbmVOdW1iZXIgPSAobnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbkFmdGVyU2V0U3RhdGUgPSB0aGlzLnByb3BzLm9uQ2hhbmdlUGhvbmVOdW1iZXJcbiAgICAgICAgICAgID8gKGRpc3BsYXlWYWx1ZTogc3RyaW5nLCBpc28yOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZVBob25lTnVtYmVyPy4oZGlzcGxheVZhbHVlLCBpc28yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShudW1iZXIsIGFjdGlvbkFmdGVyU2V0U3RhdGUpO1xuICAgIH1cblxuICAgIG9uUHJlc3NGbGFnID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vblByZXNzRmxhZykge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblByZXNzRmxhZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNvMikgdGhpcy5waWNrZXIuc2VsZWN0Q291bnRyeSh0aGlzLnN0YXRlLmlzbzIpO1xuICAgICAgICAgICAgdGhpcy5waWNrZXIuc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBnZXRQaWNrZXJEYXRhKCkge1xuICAgICAgICByZXR1cm4gUGhvbmVOdW1iZXIuZ2V0QWxsQ291bnRyaWVzKCkubWFwKChjb3VudHJ5LCBpbmRleCkgPT4gKHtcbiAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICBpbWFnZTogRmxhZ3MuZ2V0KGNvdW50cnkuaXNvMiksXG4gICAgICAgICAgICBsYWJlbDogY291bnRyeS5uYW1lLFxuICAgICAgICAgICAgZGlhbENvZGU6IGArJHtjb3VudHJ5LmRpYWxDb2RlfWAsXG4gICAgICAgICAgICBpc28yOiBjb3VudHJ5LmlzbzJcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGdldENvdW50cnlDb2RlKCkge1xuICAgICAgICBjb25zdCBjb3VudHJ5RGF0YSA9IFBob25lTnVtYmVyLmdldENvdW50cnlEYXRhQnlDb2RlKHRoaXMuc3RhdGUuaXNvMik7XG4gICAgICAgIHJldHVybiBjb3VudHJ5RGF0YSA/IGNvdW50cnlEYXRhLmRpYWxDb2RlIDogbnVsbDtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIGdldEFsbENvdW50cmllcygpIHtcbiAgICAgICAgcmV0dXJuIFBob25lTnVtYmVyLmdldEFsbENvdW50cmllcygpO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgZ2V0RmxhZyA9IChpc28yKSA9PiBGbGFncy5nZXQoaXNvMik7XG5cbiAgICBnZXREaWFsQ29kZSgpIHtcbiAgICAgICAgcmV0dXJuIFBob25lTnVtYmVyLmdldERpYWxDb2RlKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH1cblxuICAgIGdldFZhbHVlKHRleHQ/KSB7XG4gICAgICAgIHJldHVybiB0ZXh0ID8gdGV4dC5yZXBsYWNlKC9bXjAtOV0vZywgJycpIDogdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICB9XG5cbiAgICBnZXROdW1iZXJUeXBlKCkge1xuICAgICAgICByZXR1cm4gUGhvbmVOdW1iZXIuZ2V0TnVtYmVyVHlwZShcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmlzbzJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRJU09Db2RlID0gKCkgPT4gdGhpcy5zdGF0ZS5pc28yO1xuXG4gICAgc2VsZWN0Q291bnRyeSA9IChpc28yKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzbzIgIT09IGlzbzIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50cnlEYXRhID0gUGhvbmVOdW1iZXIuZ2V0Q291bnRyeURhdGFCeUNvZGUoaXNvMik7XG4gICAgICAgICAgICBpZiAoY291bnRyeURhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc28yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVZhbHVlOiB0aGlzLmZvcm1hdChgKyR7Y291bnRyeURhdGEuZGlhbENvZGV9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYCske2NvdW50cnlEYXRhLmRpYWxDb2RlfWBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25TZWxlY3RDb3VudHJ5KSB0aGlzLnByb3BzLm9uU2VsZWN0Q291bnRyeShpc28yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRWYWx1ZSA9IChudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudmFsdWUgIT09IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNWYWxpZE51bWJlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudmFsdWUubGVuZ3RoIDwgNCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gUGhvbmVOdW1iZXIuaXNWYWxpZE51bWJlcihcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmlzbzJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3JtYXQodGV4dCwgaXNvMj8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYXV0b0Zvcm1hdFxuICAgICAgICAgICAgPyBQaG9uZU51bWJlci5mb3JtYXQodGV4dCwgaXNvMiB8fCB0aGlzLnN0YXRlLmlzbzIpXG4gICAgICAgICAgICA6IHRleHQ7XG4gICAgfVxuXG4gICAgdXBkYXRlVmFsdWUobnVtYmVyLCBhY3Rpb25BZnRlclNldFN0YXRlOiBhbnkgPSBudWxsKSB7XG4gICAgICAgIGxldCBtb2RpZmllZE51bWJlciA9IHRoaXMuZ2V0VmFsdWUobnVtYmVyKTtcbiAgICAgICAgY29uc3QgeyBhbGxvd1plcm9BZnRlckNvdW50cnlDb2RlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGlmIChtb2RpZmllZE51bWJlclswXSAhPT0gJysnICYmIG51bWJlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkTnVtYmVyID0gYCske21vZGlmaWVkTnVtYmVyfWA7XG4gICAgICAgIH1cbiAgICAgICAgbW9kaWZpZWROdW1iZXIgPSBhbGxvd1plcm9BZnRlckNvdW50cnlDb2RlXG4gICAgICAgICAgICA/IG1vZGlmaWVkTnVtYmVyXG4gICAgICAgICAgICA6IHRoaXMucG9zc2libHlFbGltaW5hdGVaZXJvQWZ0ZXJDb3VudHJ5Q29kZShtb2RpZmllZE51bWJlcik7XG4gICAgICAgIGNvbnN0IGlzbzI6IHN0cmluZyA9IFBob25lTnVtYmVyLmdldENvdW50cnlDb2RlT2ZOdW1iZXIobW9kaWZpZWROdW1iZXIpO1xuXG4gICAgICAgIGxldCBjb3VudHJ5RGlhbENvZGU7XG4gICAgICAgIGlmIChpc28yKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudHJ5RGF0YSA9IFBob25lTnVtYmVyLmdldENvdW50cnlEYXRhQnlDb2RlKGlzbzIpO1xuICAgICAgICAgICAgY291bnRyeURpYWxDb2RlID0gY291bnRyeURhdGEuZGlhbENvZGU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGlzcGxheVZhbHVlO1xuICAgICAgICBpZiAobW9kaWZpZWROdW1iZXIgPT09IGArJHtjb3VudHJ5RGlhbENvZGV9YCkge1xuICAgICAgICAgICAgZGlzcGxheVZhbHVlID0gbW9kaWZpZWROdW1iZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSB0aGlzLmZvcm1hdChtb2RpZmllZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzbzIsXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUsXG4gICAgICAgICAgICB2YWx1ZTogbW9kaWZpZWROdW1iZXIsXG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIGlmIChhY3Rpb25BZnRlclNldFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uQWZ0ZXJTZXRTdGF0ZShkaXNwbGF5VmFsdWUsIGlzbzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBvc3NpYmx5RWxpbWluYXRlWmVyb0FmdGVyQ291bnRyeUNvZGUobnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGRpYWxDb2RlID0gUGhvbmVOdW1iZXIuZ2V0RGlhbENvZGUobnVtYmVyKTtcbiAgICAgICAgcmV0dXJuIG51bWJlci5zdGFydHNXaXRoKGAke2RpYWxDb2RlfTBgKVxuICAgICAgICAgICAgPyBkaWFsQ29kZSArIG51bWJlci5zdWJzdHIoZGlhbENvZGUubGVuZ3RoICsgMSlcbiAgICAgICAgICAgIDogbnVtYmVyO1xuICAgIH1cblxuICAgIGZvY3VzKCkge1xuICAgICAgICB0aGlzLmlucHV0UGhvbmUuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBibHVyKCkge1xuICAgICAgICB0aGlzLmlucHV0UGhvbmUuYmx1cigpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBpc28yLCBkaXNwbGF5VmFsdWUsIGRpc2FibGVkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBUZXh0Q29tcG9uZW50OiBhbnkgPSB0aGlzLnByb3BzLnRleHRDb21wb25lbnQgfHwgVGV4dElucHV0O1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCB0aGlzLnByb3BzLnN0eWxlXX0+XG4gICAgICAgICAgICAgICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFja1xuICAgICAgICAgICAgICAgICAgICBvblByZXNzPXt0aGlzLm9uUHJlc3NGbGFnfVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZT17RmxhZ3MuZ2V0KGlzbzIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e1tzdHlsZXMuZmxhZywgdGhpcy5wcm9wcy5mbGFnU3R5bGVdfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrPlxuICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXt7IGZsZXg6IDEsIG1hcmdpbkxlZnQ6IHRoaXMucHJvcHMub2Zmc2V0IHx8IDEwIH19PlxuICAgICAgICAgICAgICAgICAgICA8VGV4dENvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXsocmVmKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dFBob25lID0gcmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlPXshZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29ycmVjdD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17W3N0eWxlcy50ZXh0LCB0aGlzLnByb3BzLnRleHRTdHlsZV19XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZVRleHQ9eyh0ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZVBob25lTnVtYmVyKHRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkVHlwZT1cInBob25lLXBhZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmxpbmVDb2xvckFuZHJvaWQ9XCJyZ2JhKDAsMCwwLDApXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtkaXNwbGF5VmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy50ZXh0UHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9WaWV3PlxuXG4gICAgICAgICAgICAgICAgPENvdW50cnlQaWNrZXJcbiAgICAgICAgICAgICAgICAgICAgcmVmPXsocmVmKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlciA9IHJlZjtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJ5PXtpc28yfVxuICAgICAgICAgICAgICAgICAgICBvblN1Ym1pdD17dGhpcy5zZWxlY3RDb3VudHJ5fVxuICAgICAgICAgICAgICAgICAgICBidXR0b25Db2xvcj17dGhpcy5wcm9wcy5waWNrZXJCdXR0b25Db2xvcn1cbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsVGV4dD17dGhpcy5wcm9wcy5jYW5jZWxUZXh0fVxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxUZXh0U3R5bGU9e3RoaXMucHJvcHMuY2FuY2VsVGV4dFN0eWxlfVxuICAgICAgICAgICAgICAgICAgICBjb25maXJtVGV4dD17dGhpcy5wcm9wcy5jb25maXJtVGV4dH1cbiAgICAgICAgICAgICAgICAgICAgY29uZmlybVRleHRTdHlsZT17dGhpcy5wcm9wcy5jb25maXJtVGV4dFN0eWxlfVxuICAgICAgICAgICAgICAgICAgICBwaWNrZXJCYWNrZ3JvdW5kQ29sb3I9e3RoaXMucHJvcHMucGlja2VyQmFja2dyb3VuZENvbG9yfVxuICAgICAgICAgICAgICAgICAgICBpdGVtU3R5bGU9e3RoaXMucHJvcHMucGlja2VySXRlbVN0eWxlfVxuICAgICAgICAgICAgICAgICAgICBvblByZXNzQ2FuY2VsPXt0aGlzLnByb3BzLm9uUHJlc3NDYW5jZWx9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJlc3NDb25maXJtPXt0aGlzLnByb3BzLm9uUHJlc3NDb25maXJtfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19